package org.firstinspires.ftc.teamcode.drive.opmode;

import com.acmerobotics.dashboard.config.Config;
import com.acmerobotics.dashboard.telemetry.TelemetryPacket;
import com.acmerobotics.roadrunner.geometry.Pose2d;
import com.acmerobotics.roadrunner.geometry.Vector2d;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.Servo;

import org.firstinspires.ftc.robotcore.external.Telemetry;
import org.opencv.core.Mat;
import org.opencv.core.Point;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.imgproc.Imgproc;
import org.openftc.easyopencv.OpenCvCamera;
import org.openftc.easyopencv.OpenCvCameraFactory;
import org.openftc.easyopencv.OpenCvCameraRotation;
import org.openftc.easyopencv.OpenCvPipeline;
import org.openftc.easyopencv.OpenCvInternalCamera;
import org.firstinspires.ftc.robotcore.external.hardware.camera.WebcamName;

import org.firstinspires.ftc.teamcode.drive.SampleMecanumDrive;
import org.firstinspires.ftc.teamcode.trajectorysequence.TrajectorySequence;

import org.openftc.easyopencv.OpenCvPipeline;
import org.openftc.easyopencv.OpenCvCamera;
import org.openftc.easyopencv.OpenCvCameraFactory;
import org.openftc.easyopencv.OpenCvCameraRotation;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.Scalar;
import org.opencv.core.CvType;
import org.opencv.core.Size;
import org.opencv.imgproc.Imgproc;


@Config
@Autonomous

public class camera extends LinearOpMode {


public int caz = 0;
OpenCvCamera camera;

    //WebcamName webcamName = hardwareMap.get(WebcamName.class, "Webcam 1");



    @Override
    public  void runOpMode() throws InterruptedException {
        TelemetryPacket packet = new TelemetryPacket();

        int cameraMonitorViewId = hardwareMap.appContext.getResources().getIdentifier("cameraMonitorViewId", "id", hardwareMap.appContext.getPackageName());

        camera = OpenCvCameraFactory.getInstance().createInternalCamera(OpenCvInternalCamera.CameraDirection.FRONT, cameraMonitorViewId);
        camera.openCameraDeviceAsync(new OpenCvCamera.AsyncCameraOpenListener()
        {
            @Override
            public void onOpened()
            {

                camera.setPipeline(new camera.EmptyPipeline());
                camera.startStreaming(640, 480, OpenCvCameraRotation.UPRIGHT);


            }
            @Override
            public void onError(int errorCode)
            {
                /*
                 * This will be called if the camera could not be opened
                 */
            }
        });
        while(opModeInInit()){

            if(caz == 1){
                telemetry.addData("Caz: ","Stanga");
            }else if(caz == 2){
                telemetry.addData("Caz: ","Centru");
            }else if(caz == 3){
                telemetry.addData("Caz: ","Dreapta");
            }

        }
        waitForStart();
        
    }


    class EmptyPipeline extends OpenCvPipeline
    {
        public double hueMin = 30;
        public double hueMax = 90;
        public double saturationMin = 100;
        public double saturationMax = 255;
        public double valueMin = 100;
        public double valueMax = 255;
        int x1 = 70, y1 = 180, w1 = 130, h1 = 90;
        int x2 = 350, y2 = 160, w2 = 130, h2 = 90;
        int minim = 20;
        @Override
        public Mat processFrame(Mat input)
        {

            Mat hsvMat = new Mat();
            Mat mask = new Mat();
            Mat output = new Mat();

            Imgproc.cvtColor(input, hsvMat, Imgproc.COLOR_RGB2HSV);

            Scalar lowerBound = new Scalar(hueMin, saturationMin, valueMin);
            Scalar upperBound = new Scalar(hueMax, saturationMax, valueMax);

            Core.inRange(hsvMat, lowerBound, upperBound, mask);
            Core.bitwise_and(input, input, output, mask);

            Rect reg1 = new Rect(x1, y1, w1, h1);
            Rect reg2 = new Rect(x2, y2, w2, h2);
            Mat segment = new Mat(output, reg1);
            Mat segment2 = new Mat(output, reg2);
            Imgproc.rectangle(output, reg1, new Scalar(255, 0, 0), 2); // Draw blue rectangles
            Imgproc.rectangle(output, reg2, new Scalar(255, 0, 0), 2); // Draw blue rectangles

            int pixels1 = (countPixels(segment)/((x1+w1) * (y1+h1))) * 100;
            int pixels2 = (countPixels(segment2)/((x1+w1) * (y1+h1))) * 100;

            if(pixels1 > minim || pixels2 > minim){
                if(pixels1 > pixels2){
                    caz =1;
                }else{
                    caz = 2;
                }
            }else{
                caz = 3;
            }

            return output;
        }

        int countPixels(Mat box){
            int pixels = Core.countNonZero(box);

            return pixels;
        }

    }

}
