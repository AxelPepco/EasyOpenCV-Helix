package org.firstinspires.ftc.teamcode.drive.opmode;

import com.acmerobotics.dashboard.config.Config;
import com.acmerobotics.dashboard.telemetry.TelemetryPacket;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;

import org.firstinspires.ftc.robotcore.external.Telemetry;
import org.opencv.core.Mat;
import org.opencv.core.Point;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.core.MatOfPoint;
import org.opencv.core.MatOfPoint2f;
import org.opencv.core.RotatedRect;
import org.opencv.core.CvType;
import org.opencv.imgproc.Imgproc;
import org.opencv.imgproc.Moments;
import org.openftc.easyopencv.OpenCvCamera;
import org.openftc.easyopencv.OpenCvCameraFactory;
import org.openftc.easyopencv.OpenCvCameraRotation;
import org.openftc.easyopencv.OpenCvInternalCamera;
import org.openftc.easyopencv.OpenCvPipeline;
import org.opencv.core.Core;

import java.util.ArrayList;
import java.util.List;

@Config
@Autonomous

public class camera extends LinearOpMode {

    public int caz = 0;
    OpenCvCamera camera;

    @Override
    public void runOpMode() throws InterruptedException {
        TelemetryPacket packet = new TelemetryPacket();

        int cameraMonitorViewId = hardwareMap.appContext.getResources().getIdentifier("cameraMonitorViewId", "id", hardwareMap.appContext.getPackageName());

        camera = OpenCvCameraFactory.getInstance().createInternalCamera(OpenCvInternalCamera.CameraDirection.FRONT, cameraMonitorViewId);
        camera.openCameraDeviceAsync(new OpenCvCamera.AsyncCameraOpenListener() {
            @Override
            public void onOpened() {
                camera.setPipeline(new camera.EmptyPipeline());
                camera.startStreaming(640, 480, OpenCvCameraRotation.UPRIGHT);
            }

            @Override
            public void onError(int errorCode) {

            }
        });

        while (opModeInInit()) {
            if (caz == 1) {
                telemetry.addData("Caz: ", "Stanga");
            } else if (caz == 2) {
                telemetry.addData("Caz: ", "Centru");
            } else if (caz == 3) {
                telemetry.addData("Caz: ", "Dreapta");
            }
            telemetry.update();
        }
        waitForStart();
        int selectedCase = caz;
        while(opModeIsActive){
            if (selectedCase == 1) {
                telemetry.addData("Caz: ", "Stanga");
            } else if (selectedCase == 2) {
                telemetry.addData("Caz: ", "Centru");
            } else if (selectedCase == 3) {
                telemetry.addData("Caz: ", "Dreapta");
            }
            telemetry.update();
        }
    }

    class EmptyPipeline extends OpenCvPipeline {
        public double hueMin = 30;
        public double hueMax = 90;
        public double saturationMin = 100;
        public double saturationMax = 255;
        public double valueMin = 100;
        public double valueMax = 255;
        int x1 = 70, y1 = 180, w1 = 130, h1 = 90;
        int x2 = 350, y2 = 160, w2 = 130, h2 = 90;
        int minim = 20;

        @Override
        public Mat processFrame(Mat input) {
            Mat hsvMat = new Mat();
            Mat mask = new Mat();
            Mat output = new Mat();
            Mat grayMat = new Mat();
            Mat threshMat = new Mat();

            Imgproc.cvtColor(input, hsvMat, Imgproc.COLOR_RGB2HSV);

            Scalar lowerBound = new Scalar(hueMin, saturationMin, valueMin);
            Scalar upperBound = new Scalar(hueMax, saturationMax, valueMax);

            Core.inRange(hsvMat, lowerBound, upperBound, mask);

            Imgproc.cvtColor(mask,grayMat,Imgproc.COLOR_HSV2GRAY);

            Core.inRange(hsvMat, lowerBound, upperBound, mask);

            Imgproc.threshold(grayMat, threshMat, 127, 255, Imgproc.THRESH_BINARY);



            List<MatOfPoint> contours = new ArrayList<>();
            Mat hierarchy = new Mat();
            Imgproc.findContours(mask, contours, hierarchy, Imgproc.RETR_EXTERNAL, Imgproc.CHAIN_APPROX_SIMPLE);

            double maxArea = 0;
            Rect largestRect = null;

            for (MatOfPoint contour : contours) {
                double area = Imgproc.contourArea(contour);
                if (area > maxArea) {
                    maxArea = area;
                    largestRect = Imgproc.boundingRect(contour);
                }
            }

            if (largestRect != null) {
                Imgproc.rectangle(output, largestRect, new Scalar(0, 255, 0), 2);

                Rect reg1 = new Rect(x1, y1, w1, h1);
                Rect reg2 = new Rect(x2, y2, w2, h2);

                Imgproc.rectangle(output, reg1, new Scalar(255, 0, 0), 2);
                Imgproc.rectangle(output, reg2, new Scalar(255, 0, 0), 2);

                if (rectsIntersect(largestRect, reg1)) {
                    caz = 1;
                } else if (rectsIntersect(largestRect, reg2)) {
                    caz = 2;
                } else {
                    caz = 3;
                }
            }

            mask.release();
            hsvMat.release();
            output.release();
            grayMat.release();
            threshMat.release();

            return output;
        }

        private boolean rectsIntersect(Rect r1, Rect r2) {
            return r1.x < r2.x + r2.width && r1.x + r1.width > r2.x && r1.y < r2.y + r2.height && r1.y + r1.height > r2.y;
        }
    }
}
